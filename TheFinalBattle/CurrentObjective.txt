In this challenge, we will extend our game by giving characters attacks and allowing players to pick an
attack instead of doing nothing. We won’t address tracking or dealing out damage yet.


Objectives:
[X] The game needs to be able to represent specific types of attacks. Attacks all have a name (and will
have other capabilities later).

[X] Each character has a standard attack, but this varies from character to character. The True
Programmer’s (the player character’s) attack is called punch. The Skeleton’s attack is called bone
crunch.

[ ] The program must be capable of representing an attack action, our second action type. An attack
action must represent which attack is being used and the target of the attack. When this action runs,
it should state the attacker, the attack, and the target. For example: “TOG used PUNCH on SKELETON.”

[ ] Our computer player should pick an attack action instead of a do-nothing action. The attack action
can be simple for now: always use the character’s standard attack and always target the other party’s
first character. (If you want to choose a random target or some other logic, you can.)


The game should now run more like this:
{
	It is TOG's turn...
	TOG used PUNCH on SKELETON.
	It is SKELETON's turn...
	SKELETON used BONE CRUNCH on TOG.
	...
}


Hint: The player will need access to the list of characters that are potential targets. In my case, I
passed my Battle object (which represents the whole battle and had access to both parties and all
their characters) to the player. I then added methods to Battle where I could give it a character,
and it would return the character’s party (GetPartyFor(Character)) or the opposing party
(GetEnemyPartyFor(Character)).